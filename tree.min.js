"use strict";var app=angular.module("90TechSAS.angular-tree",[]);app.factory("RecursionHelper",["$compile",function($compile){return{compile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}}}}]),app.directive("zlTree",function(RecursionHelper){return{restrict:"E",scope:{root:"=zlTreeRoot",loadFunction:"&"},template:'<span>{{ family}}</span><ul><div ng-if="loading" class="spinner"></div><li ng-if="!loading" ng-repeat="child in family.children"><button ng-click="toggles[child] = !toggles[child]">{{toggles[child] ? \'-\' : \'+\'}}</button><span ng-if="!toggles[child]">{{child}}</span><zl-tree ng-if="toggles[child]" zl-tree-root="child" load-function="loadFunction({$id: $id})"></zl-tree></li></ul>',compile:function(element){return RecursionHelper.compile(element)},controller:function($scope){$scope.toggles={},$scope.loading=!0,$scope.loadFunction({$id:$scope.root}).then(function(data){$scope.family=data,$scope.loading=!1})}}});